{"version":3,"sources":["modules/Authentication/redux/sagas/login.saga.js","modules/Authentication/redux/actions/login.action.js","modules/Authentication/redux/sagas/index.js","redux/root.saga.js","modules/Authentication/redux/reducers/login.reducer.js","redux/root.reducer.js","redux/store.js","modules/Authentication/components/Login/loginValidation.js","modules/Authentication/components/Login/LoginForm.jsx","modules/Authentication/components/Login/EmployeeCard.jsx","modules/Authentication/components/Login/Dashboard.jsx","modules/Authentication/components/Login/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["loginRequestSaga","loginSaga","payload","email","password","login","username","put","type","console","log","takeLatest","loginModuleSaga","all","rootSaga","initialState","loading","loggedIn","error","combinedReducers","combineReducers","loginModuleReducer","state","action","form","formReducer","sagaMiddleware","createSagaMiddleware","middleware","applyMiddleware","store","createStore","composeWithDevTools","run","max","required","value","undefined","maxLengthP","length","test","renderField","input","label","meta","touched","className","placeholder","reduxForm","handleSubmit","onSubmit","Field","name","component","validate","id","EmployeeCard","employeeDetails","users","map","user","key","age","gender","phoneNo","Empoloyee","this","Component","mapDispatchToProps","logOutRequest","connect","props","onClick","submit","values","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f47539f7.chunk.js","sourcesContent":["import { put, takeLatest } from 'redux-saga/effects';\nimport {\n\tLOG_IN_REQUEST,\n\tlogInRequestSuccess,\n\tlogInRequestFailure,\n} from '../actions/login.action';\nimport login from '../../components/Login/api/login';\n\nfunction* loginRequestSaga({ payload: { email, password } }) {\n\tif (email === login.username && password === login.password) {\n\t\tyield put(logInRequestSuccess());\n\t\tconsole.log('Login Success');\n\t} else {\n\t\tyield put(logInRequestFailure())\n\t\tconsole.log('Login Failure');\n\t}\n}\n\nexport default function* loginSaga() {\n\tyield takeLatest(LOG_IN_REQUEST, loginRequestSaga);\n}\n\n\n","export const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_REQUEST_SUCCESS = 'LOG_IN_REQUEST_SUCCESS';\nexport const LOG_IN_REQUEST_FAILURE = 'LOG_IN_REQUEST_FAILURE';\n\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\n\nexport const logInRequest = (payload) => ({\n\ttype: LOG_IN_REQUEST, payload\n});\n\nexport const logInRequestSuccess = () => ({\n\ttype: LOG_IN_REQUEST_SUCCESS\n});\n\nexport const logInRequestFailure = () => ({\n\ttype: LOG_IN_REQUEST_FAILURE\n});\n\nexport const logOutRequest = () => ({\n\ttype: LOG_OUT_REQUEST\n});","import {all} from 'redux-saga/effects';\nimport loginSaga from './login.saga';\n\nexport default function* loginModuleSaga() {\n\tyield all([\n\t\tloginSaga(),\n\t]);\n}","import {all} from 'redux-saga/effects';\nimport loginModuleSaga from '../modules/Authentication/redux/sagas/index';\n\nexport function* rootSaga() {\n\tyield all([\n\t\tloginModuleSaga(),\n\t]);\n}","import {\n\tLOG_IN_REQUEST,\n\tLOG_IN_REQUEST_FAILURE,\n\tLOG_IN_REQUEST_SUCCESS,\n\tLOG_OUT_REQUEST\n} from '../actions/login.action';\n\nconst initialState = {\n\tloading: false,\n\tloggedIn: false,\n\terror: null,\n};\n\nexport const loginModuleReducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase LOG_IN_REQUEST:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: true\n\t\t\t};\n\t\tcase LOG_IN_REQUEST_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\tloggedIn: true,\n\t\t\t};\n\t\tcase LOG_IN_REQUEST_FAILURE:\n\t\t\treturn {\n\t\t\t\t...state\n\t\t\t};\n\t\tcase LOG_OUT_REQUEST:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\tloggedIn: false,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n","import { combineReducers } from 'redux';\nimport { loginModuleReducer } from '../modules/Authentication/redux/reducers/login.reducer';\nimport { reducer as formReducer } from 'redux-form';\n\nconst combinedReducers = combineReducers({\n\tloginModuleReducer,\n\tform: formReducer,\n});\n\nexport const rootReducer = function (state, action) {\n\treturn combinedReducers(state, action);\n};\n","// need for ES6 Generators to work correctly\nimport 'regenerator-runtime/runtime';\nimport {applyMiddleware, createStore} from 'redux';\n// it is middleware needed only for development purposes\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport {rootSaga} from './root.saga';\nimport {rootReducer} from './root.reducer';\nimport createSagaMiddleware from 'redux-saga';\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// apply each middleware\nconst middleware = applyMiddleware(sagaMiddleware);\n\n// create single store with root reducer and middleware\nconst store = createStore(rootReducer, composeWithDevTools(middleware));\nexport default store;\n\n\n// run the saga\nsagaMiddleware.run(rootSaga);","export const required = value => (value || typeof value === 'number' ? undefined : 'Required')\n\nconst maxLength = max => value => \n\tvalue && value.length > max ? `Must be ${max} characters or less` : undefined\n\nexport const maxLengthP = maxLength(12)\n\nexport const email = value =>\n  value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\n    ? 'Invalid email address'\n    : undefined","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport { Field, reduxForm } from 'redux-form'\nimport { required, email, maxLengthP } from './loginValidation.js';\nimport './css/login.css';\nconst renderField = ({ input, label, type, meta: { touched, error } }) => (\n    <div>\n        <label>{label}</label>\n        <div className=\"loginInput\">\n            <input {...input} placeholder={label} type={type} className=\"input_style\" />\n            {touched &&\n                ((error && <p className=\"error\">{error}</p>))}\n        </div>\n    </div>\n)\nconst LoginForm = ({ handleSubmit }) => {\n    return <>\n        <form onSubmit={handleSubmit} >\n            <div className=\"login_header\">Admin Login</div>\n            <div className=\"login_div\">\n                <div>\n                    <Field\n                        name=\"email\"\n                        label=\"Email\"\n                        component={renderField}\n                        type=\"email\"\n                        validate={[required, email]}\n                    />\n                </div>\n                <div>\n                    <Field\n                        name=\"password\"\n                        label=\"Password\"\n                        component={renderField}\n                        type=\"password\"\n                        validate={[required, maxLengthP]}\n                    />\n                </div>\n                <div>\n                    <button id=\"login_button\" type=\"submit\"> Submit </button>\n                </div>\n            </div>\n        </form>\n    </>\n};\nLoginForm.propTypes = {\n    //check types of props\n    name: PropTypes.string,\n    label: PropTypes.string,\n};\nexport default reduxForm({\n    form: 'loginForm',\n})(LoginForm);","import React, { Component } from 'react'\nimport Empoloyee from '../Login/api/Employee';\nimport './css/employee.css';\nexport default class EmployeeCard extends Component {\n\n    employeeDetails = (users) => {\n        return users.map(user =>\n            <div key={user.id} className=\"cardItems\">\n                <p>Name: {user.name}</p>\n                <p>Age: {user.age}</p>\n                <p>Gender: {user.gender}</p>\n                <p>Email:{user.email}</p>\n                <p>PhoneNo.:{user.phoneNo}</p>\n            </div>\n        )\n    }\n\n    render() {\n        const users = Empoloyee.user;\n        return (\n            <div className=\"card\">\n                {users && this.employeeDetails(users)}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { logOutRequest } from '../../redux/actions/login.action';\nimport EmployeeCard from './EmployeeCard.jsx';\n\nconst mapDispatchToProps = {\n    logOutRequest\n};\n\nexport default connect(null, mapDispatchToProps)(class Dashboard extends Component {\n    static propTypes = {\n        logInRequestFailure: PropTypes.func\n    };\n    render() {\n        const { logOutRequest } = this.props;\n        return <>\n            <article>\n                <section className='text-section'>\n                    <div>\n                        <button id=\"logout_button\" onClick={logOutRequest}>Logout</button>\n                    </div>\n                    <h1>Employee Dashboard</h1>\n                    <p>Welcome, you are logged in!</p>\n                    <EmployeeCard />\n                </section>\n            </article>\n        </>\n    }\n});\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport LoginForm from './LoginForm.jsx';\nimport { logInRequest } from '../../redux/actions/login.action';\nimport Dashboard from './Dashboard.jsx';\n\nconst mapStateToProps = state => {\n    const { loggedIn } = state.loginModuleReducer;\n    return { loggedIn };\n};\nconst mapDispatchToProps = {\n    login: logInRequest,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(class Login extends Component {\n    static propTypes = {\n        onSubmit: PropTypes.func\n    };\n\n    submit = (values) => {\n        const { login } = this.props;\n        login(values);\n    };\n    render() {\n        const { loggedIn } = this.props;\n        return <>\n            <div className=\"loginWrap\">\n                {loggedIn ? <Dashboard /> : <LoginForm onSubmit={this.submit} />}\n            </div>\n        </>\n    }\n});","import React from 'react';\nimport './App.css';\nimport Login from '../src/modules/Authentication/components/Login/Login.jsx';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Login />\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={store}>\n                        <App />\n                </Provider>, \n        document.getElementById('root')\n        );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}